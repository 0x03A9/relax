{
  "React Component (Class)": {
    "prefix": "react",
    "body": [
      "import * as React from 'react';",
      "import * as Immutable from 'immutable';",
      "",
      "export interface Props {",
      "}",
      "",
      "interface State {",
      "}",
      "",
      "export class ${1:Name} extends React.Component<Props, State> {",
      "  $0",
      "}"
    ],
    "description": "Create a (ts) React Component class"
  },
  "React Component (Class) with dispatch-context": {
    "prefix": "react with dispatch-context",
    "body": [
      "import * as React from 'react';",
      "import * as Immutable from 'immutable';",
      "import { DispatchContext } from 'components/dispatchContextProvider';",
      "",
      "export interface Props {",
      "}",
      "",
      "interface State {",
      "}",
      "",
      "export class ${1:Name} extends React.Component<Props, State> {",
      "  static contextTypes = {",
      "    dispatch: React.PropTypes.func.isRequired,",
      "  }",
      "",
      "  context: DispatchContext;",
      "  ",
      "  $0",
      "}"
    ],
    "description": "Create a (ts) React Component class with dispatch context"
  },
  "render": {
    "prefix": "render",
    "body": [
      "render(){",
      "  return (",
      "    <div>$0</div>",
      "  );",
      "}"
    ]
  },
  "componentWillMount": {
    "prefix": "componentWillMount",
    "body": [
      "componentWillMount(): void {",
      "  $0",
      "}"
    ],
    "description": "componentWillMount() is invoked immediately before mounting occurs. It is called before render(), therefore setting state in this method will not trigger a re-rendering. Avoid introducing any side-effects or subscriptions in this method. This is the only lifecycle hook called on server rendering. Generally, we recommend using the constructor() instead."
  },
  "componentDidMount": {
    "prefix": "componentDidMount",
    "body": [
      "componentDidMount(): void {",
      "  $0",
      "}"
    ],
    "description": "componentDidMount() is invoked immediately after a component is mounted. Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request. Setting state in this method will trigger a re-rendering."
  },
  "componentWillReceiveProps": {
    "prefix": "componentWillReceiveProps",
    "body": [
      "componentWillReceiveProps(nextProps: Props): void {",
      "  $0",
      "}"
    ],
    "description": "componentWillReceiveProps() is invoked before a mounted component receives new props. If you need to update the state in response to prop changes (for example, to reset it), you may compare this.props and nextProps and perform state transitions using this.setState() in this method. Note that React may call this method even if the props have not changed, so make sure to compare the current and next values if you only want to handle changes. This may occur when the parent component causes your component to re-render. React doesn't call componentWillReceiveProps with initial props during mounting. It only calls this method if some of component's props may update. Calling this.setState generally doesn't trigger componentWillReceiveProps."
  },
  "shouldComponentUpdate": {
    "prefix": "shouldComponentUpdate",
    "body": [
      "shouldComponentUpdate(nextProps: Props, nextState: State): boolean {",
      "  $0",
      "}"
    ],
    "description": "Use shouldComponentUpdate() to let React know if a component's output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior. shouldComponentUpdate() is invoked before rendering when new props or state are being received. Defaults to true. This method is not called for the initial render or when forceUpdate() is used. Returning false does not prevent child components from re-rendering when their state changes."
  },
  "componentWillUpdate": {
    "prefix": "componentWillUpdate",
    "body": [
      "componentWillUpdate(nextProps: Props, nextState: State): void {",
      "  $0",
      "}"
    ],
    "description": "componentWillUpdate() is invoked immediately before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render. Note that you cannot call this.setState() here. If you need to update state in response to a prop change, use componentWillReceiveProps() instead."
  },
  "componentDidUpdate": {
    "prefix": "componentDidUpdate",
    "body": [
      "componentDidUpdate(prevProps: Props, prevState: State): void {",
      "  $0",
      "}"
    ],
    "description": "componentDidUpdate() is invoked immediately after updating occurs. This method is not called for the initial render. Note that React may call this method even if the props have not changed, so make sure to compare the current and next values if you only want to handle changes. This may occur when the parent component causes your component to re-render."
  },
  "componentWillUnmount": {
    "prefix": "componentWillUnmount",
    "body": [
      "componentWillUnmount(): void {",
      "  $0",
      "}"
    ],
    "description": "componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any DOM elements that were created in componentDidMount"
  },
  "bind": {
    "prefix": "bind method",
    "body": [
      "this.${1} = this.${1}.bind(this);"
    ],
    "description": ""
  }
}
